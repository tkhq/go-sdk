// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sessions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sessions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateReadOnlySession(params *CreateReadOnlySessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReadOnlySessionOK, error)

	CreateReadWriteSession(params *CreateReadWriteSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReadWriteSessionOK, error)

	GetWhoami(params *GetWhoamiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWhoamiOK, error)

	OauthLogin(params *OauthLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OauthLoginOK, error)

	OtpLogin(params *OtpLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OtpLoginOK, error)

	StampLogin(params *StampLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StampLoginOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateReadOnlySession creates read only session

Create a read only session for a user (valid for 1 hour)
*/
func (a *Client) CreateReadOnlySession(params *CreateReadOnlySessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReadOnlySessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReadOnlySessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateReadOnlySession",
		Method:             "POST",
		PathPattern:        "/public/v1/submit/create_read_only_session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateReadOnlySessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReadOnlySessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateReadOnlySession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateReadWriteSession creates read write session

Create a read write session for a user
*/
func (a *Client) CreateReadWriteSession(params *CreateReadWriteSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReadWriteSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReadWriteSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateReadWriteSession",
		Method:             "POST",
		PathPattern:        "/public/v1/submit/create_read_write_session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateReadWriteSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReadWriteSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateReadWriteSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWhoami whos am i

Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
*/
func (a *Client) GetWhoami(params *GetWhoamiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWhoamiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWhoamiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWhoami",
		Method:             "POST",
		PathPattern:        "/public/v1/query/whoami",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWhoamiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWhoamiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWhoami: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OauthLogin logins with oauth

Create an Oauth session for a user
*/
func (a *Client) OauthLogin(params *OauthLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OauthLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOauthLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OauthLogin",
		Method:             "POST",
		PathPattern:        "/public/v1/submit/oauth_login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OauthLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OauthLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OauthLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OtpLogin logins with o t p

Create an OTP session for a user
*/
func (a *Client) OtpLogin(params *OtpLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OtpLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOtpLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OtpLogin",
		Method:             "POST",
		PathPattern:        "/public/v1/submit/otp_login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OtpLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OtpLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OtpLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StampLogin logins with a stamp

Create a session for a user through stamping client side (api key, wallet client, or passkey client)
*/
func (a *Client) StampLogin(params *StampLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StampLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStampLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StampLogin",
		Method:             "POST",
		PathPattern:        "/public/v1/submit/stamp_login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StampLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StampLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StampLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
