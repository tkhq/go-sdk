// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InitOtpIntent init otp intent
//
// swagger:model InitOtpIntent
type InitOtpIntent struct {

	// Optional flag to specify if the OTP code should be alphanumeric (Crockfordâ€™s Base32). Default = true
	Alphanumeric bool `json:"alphanumeric,omitempty"`

	// Email or phone number to send the OTP code to
	// Required: true
	Contact *string `json:"contact"`

	// Optional parameters for customizing emails. If not provided, the default email will be used.
	EmailCustomization *EmailCustomizationParams `json:"emailCustomization,omitempty"`

	// Expiration window (in seconds) indicating how long the OTP is valid for. If not provided, a default of 5 minutes will be used. Maximum value is 600 seconds (10 minutes)
	ExpirationSeconds string `json:"expirationSeconds,omitempty"`

	// Optional length of the OTP code. Default = 9
	OtpLength int32 `json:"otpLength,omitempty"`

	// Whether to send OTP via SMS or email. Possible values: OTP_TYPE_SMS, OTP_TYPE_EMAIL
	// Required: true
	OtpType *string `json:"otpType"`

	// Optional custom email address to use as reply-to
	ReplyToEmailAddress string `json:"replyToEmailAddress,omitempty"`

	// Optional custom email address from which to send the OTP email
	SendFromEmailAddress string `json:"sendFromEmailAddress,omitempty"`

	// Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
	SendFromEmailSenderName string `json:"sendFromEmailSenderName,omitempty"`

	// Optional parameters for customizing SMS message. If not provided, the default sms message will be used.
	SmsCustomization *SmsCustomizationParams `json:"smsCustomization,omitempty"`

	// Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
	UserIdentifier string `json:"userIdentifier,omitempty"`
}

// Validate validates this init otp intent
func (m *InitOtpIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailCustomization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmsCustomization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitOtpIntent) validateContact(formats strfmt.Registry) error {

	if err := validate.Required("contact", "body", m.Contact); err != nil {
		return err
	}

	return nil
}

func (m *InitOtpIntent) validateEmailCustomization(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailCustomization) { // not required
		return nil
	}

	if m.EmailCustomization != nil {
		if err := m.EmailCustomization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailCustomization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailCustomization")
			}
			return err
		}
	}

	return nil
}

func (m *InitOtpIntent) validateOtpType(formats strfmt.Registry) error {

	if err := validate.Required("otpType", "body", m.OtpType); err != nil {
		return err
	}

	return nil
}

func (m *InitOtpIntent) validateSmsCustomization(formats strfmt.Registry) error {
	if swag.IsZero(m.SmsCustomization) { // not required
		return nil
	}

	if m.SmsCustomization != nil {
		if err := m.SmsCustomization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smsCustomization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smsCustomization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this init otp intent based on the context it is used
func (m *InitOtpIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmailCustomization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmsCustomization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitOtpIntent) contextValidateEmailCustomization(ctx context.Context, formats strfmt.Registry) error {

	if m.EmailCustomization != nil {

		if swag.IsZero(m.EmailCustomization) { // not required
			return nil
		}

		if err := m.EmailCustomization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailCustomization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailCustomization")
			}
			return err
		}
	}

	return nil
}

func (m *InitOtpIntent) contextValidateSmsCustomization(ctx context.Context, formats strfmt.Registry) error {

	if m.SmsCustomization != nil {

		if swag.IsZero(m.SmsCustomization) { // not required
			return nil
		}

		if err := m.SmsCustomization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smsCustomization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smsCustomization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InitOtpIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitOtpIntent) UnmarshalBinary(b []byte) error {
	var res InitOtpIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
