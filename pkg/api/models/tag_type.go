// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TagType tag type
//
// swagger:model TagType
type TagType string

func NewTagType(value TagType) *TagType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TagType.
func (m TagType) Pointer() *TagType {
	return &m
}

const (

	// TagTypeUser captures enum value "TAG_TYPE_USER"
	TagTypeUser TagType = "TAG_TYPE_USER"

	// TagTypePrivateKey captures enum value "TAG_TYPE_PRIVATE_KEY"
	TagTypePrivateKey TagType = "TAG_TYPE_PRIVATE_KEY"
)

// for schema
var TagTypeEnum []TagType

func init() {
	var res []TagType
	if err := json.Unmarshal([]byte(`["TAG_TYPE_USER","TAG_TYPE_PRIVATE_KEY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		TagTypeEnum = append(TagTypeEnum, v)
	}
}

func (m TagType) validateTagTypeEnum(path, location string, value TagType) error {
	if err := validate.EnumCase(path, location, value, TagTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tag type
func (m TagType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTagTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tag type based on context it is used
func (m TagType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
