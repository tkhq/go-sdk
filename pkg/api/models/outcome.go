// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Outcome outcome
//
// swagger:model Outcome
type Outcome string

func NewOutcome(value Outcome) *Outcome {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Outcome.
func (m Outcome) Pointer() *Outcome {
	return &m
}

const (

	// OutcomeAllow captures enum value "OUTCOME_ALLOW"
	OutcomeAllow Outcome = "OUTCOME_ALLOW"

	// OutcomeDenyExplicit captures enum value "OUTCOME_DENY_EXPLICIT"
	OutcomeDenyExplicit Outcome = "OUTCOME_DENY_EXPLICIT"

	// OutcomeDenyImplicit captures enum value "OUTCOME_DENY_IMPLICIT"
	OutcomeDenyImplicit Outcome = "OUTCOME_DENY_IMPLICIT"

	// OutcomeRequiresConsensus captures enum value "OUTCOME_REQUIRES_CONSENSUS"
	OutcomeRequiresConsensus Outcome = "OUTCOME_REQUIRES_CONSENSUS"

	// OutcomeRejected captures enum value "OUTCOME_REJECTED"
	OutcomeRejected Outcome = "OUTCOME_REJECTED"

	// OutcomeError captures enum value "OUTCOME_ERROR"
	OutcomeError Outcome = "OUTCOME_ERROR"
)

// for schema
var OutcomeEnum []Outcome

func init() {
	var res []Outcome
	if err := json.Unmarshal([]byte(`["OUTCOME_ALLOW","OUTCOME_DENY_EXPLICIT","OUTCOME_DENY_IMPLICIT","OUTCOME_REQUIRES_CONSENSUS","OUTCOME_REJECTED","OUTCOME_ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		OutcomeEnum = append(OutcomeEnum, v)
	}
}

func (m Outcome) validateOutcomeEnum(path, location string, value Outcome) error {
	if err := validate.EnumCase(path, location, value, OutcomeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this outcome
func (m Outcome) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOutcomeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this outcome based on context it is used
func (m Outcome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
