// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FiatOnRampCryptoCurrency fiat on ramp crypto currency
//
// swagger:model FiatOnRampCryptoCurrency
type FiatOnRampCryptoCurrency string

func NewFiatOnRampCryptoCurrency(value FiatOnRampCryptoCurrency) *FiatOnRampCryptoCurrency {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FiatOnRampCryptoCurrency.
func (m FiatOnRampCryptoCurrency) Pointer() *FiatOnRampCryptoCurrency {
	return &m
}

const (

	// FiatOnRampCryptoCurrencyBtc captures enum value "FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC"
	FiatOnRampCryptoCurrencyBtc FiatOnRampCryptoCurrency = "FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC"

	// FiatOnRampCryptoCurrencyEth captures enum value "FIAT_ON_RAMP_CRYPTO_CURRENCY_ETH"
	FiatOnRampCryptoCurrencyEth FiatOnRampCryptoCurrency = "FIAT_ON_RAMP_CRYPTO_CURRENCY_ETH"

	// FiatOnRampCryptoCurrencySol captures enum value "FIAT_ON_RAMP_CRYPTO_CURRENCY_SOL"
	FiatOnRampCryptoCurrencySol FiatOnRampCryptoCurrency = "FIAT_ON_RAMP_CRYPTO_CURRENCY_SOL"

	// FiatOnRampCryptoCurrencyUsdc captures enum value "FIAT_ON_RAMP_CRYPTO_CURRENCY_USDC"
	FiatOnRampCryptoCurrencyUsdc FiatOnRampCryptoCurrency = "FIAT_ON_RAMP_CRYPTO_CURRENCY_USDC"
)

// for schema
var FiatOnRampCryptoCurrencyEnum []FiatOnRampCryptoCurrency

func init() {
	var res []FiatOnRampCryptoCurrency
	if err := json.Unmarshal([]byte(`["FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC","FIAT_ON_RAMP_CRYPTO_CURRENCY_ETH","FIAT_ON_RAMP_CRYPTO_CURRENCY_SOL","FIAT_ON_RAMP_CRYPTO_CURRENCY_USDC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		FiatOnRampCryptoCurrencyEnum = append(FiatOnRampCryptoCurrencyEnum, v)
	}
}

func (m FiatOnRampCryptoCurrency) validateFiatOnRampCryptoCurrencyEnum(path, location string, value FiatOnRampCryptoCurrency) error {
	if err := validate.EnumCase(path, location, value, FiatOnRampCryptoCurrencyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fiat on ramp crypto currency
func (m FiatOnRampCryptoCurrency) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFiatOnRampCryptoCurrencyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fiat on ramp crypto currency based on context it is used
func (m FiatOnRampCryptoCurrency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
