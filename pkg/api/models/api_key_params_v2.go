// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIKeyParamsV2 Api key params v2
//
// swagger:model ApiKeyParamsV2
type APIKeyParamsV2 struct {

	// Human-readable name for an API Key.
	// Required: true
	APIKeyName *string `json:"apiKeyName"`

	// The curve type to be used for processing API key signatures.
	// Required: true
	CurveType *APIKeyCurve `json:"curveType"`

	// Optional window (in seconds) indicating how long the API Key should last.
	ExpirationSeconds string `json:"expirationSeconds,omitempty"`

	// The public component of a cryptographic key pair used to sign messages and transactions.
	// Required: true
	PublicKey *string `json:"publicKey"`
}

// Validate validates this Api key params v2
func (m *APIKeyParamsV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIKeyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurveType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKeyParamsV2) validateAPIKeyName(formats strfmt.Registry) error {

	if err := validate.Required("apiKeyName", "body", m.APIKeyName); err != nil {
		return err
	}

	return nil
}

func (m *APIKeyParamsV2) validateCurveType(formats strfmt.Registry) error {

	if err := validate.Required("curveType", "body", m.CurveType); err != nil {
		return err
	}

	if err := validate.Required("curveType", "body", m.CurveType); err != nil {
		return err
	}

	if m.CurveType != nil {
		if err := m.CurveType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curveType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curveType")
			}
			return err
		}
	}

	return nil
}

func (m *APIKeyParamsV2) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Api key params v2 based on the context it is used
func (m *APIKeyParamsV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurveType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKeyParamsV2) contextValidateCurveType(ctx context.Context, formats strfmt.Registry) error {

	if m.CurveType != nil {

		if err := m.CurveType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curveType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curveType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIKeyParamsV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIKeyParamsV2) UnmarshalBinary(b []byte) error {
	var res APIKeyParamsV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
