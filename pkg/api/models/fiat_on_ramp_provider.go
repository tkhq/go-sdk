// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FiatOnRampProvider fiat on ramp provider
//
// swagger:model FiatOnRampProvider
type FiatOnRampProvider string

func NewFiatOnRampProvider(value FiatOnRampProvider) *FiatOnRampProvider {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FiatOnRampProvider.
func (m FiatOnRampProvider) Pointer() *FiatOnRampProvider {
	return &m
}

const (

	// FiatOnRampProviderCoinbase captures enum value "FIAT_ON_RAMP_PROVIDER_COINBASE"
	FiatOnRampProviderCoinbase FiatOnRampProvider = "FIAT_ON_RAMP_PROVIDER_COINBASE"

	// FiatOnRampProviderMoonpay captures enum value "FIAT_ON_RAMP_PROVIDER_MOONPAY"
	FiatOnRampProviderMoonpay FiatOnRampProvider = "FIAT_ON_RAMP_PROVIDER_MOONPAY"
)

// for schema
var FiatOnRampProviderEnum []FiatOnRampProvider

func init() {
	var res []FiatOnRampProvider
	if err := json.Unmarshal([]byte(`["FIAT_ON_RAMP_PROVIDER_COINBASE","FIAT_ON_RAMP_PROVIDER_MOONPAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		FiatOnRampProviderEnum = append(FiatOnRampProviderEnum, v)
	}
}

func (m FiatOnRampProvider) validateFiatOnRampProviderEnum(path, location string, value FiatOnRampProvider) error {
	if err := validate.EnumCase(path, location, value, FiatOnRampProviderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fiat on ramp provider
func (m FiatOnRampProvider) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFiatOnRampProviderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fiat on ramp provider based on context it is used
func (m FiatOnRampProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
