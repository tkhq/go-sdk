// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PayloadEncoding payload encoding
//
// swagger:model PayloadEncoding
type PayloadEncoding string

func NewPayloadEncoding(value PayloadEncoding) *PayloadEncoding {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PayloadEncoding.
func (m PayloadEncoding) Pointer() *PayloadEncoding {
	return &m
}

const (

	// PAYLOADENCODINGHEXADECIMAL captures enum value "PAYLOAD_ENCODING_HEXADECIMAL"
	PAYLOADENCODINGHEXADECIMAL PayloadEncoding = "PAYLOAD_ENCODING_HEXADECIMAL"

	// PAYLOADENCODINGTEXTUTF8 captures enum value "PAYLOAD_ENCODING_TEXT_UTF8"
	PAYLOADENCODINGTEXTUTF8 PayloadEncoding = "PAYLOAD_ENCODING_TEXT_UTF8"
)

// for schema
var PayloadEncodingEnum []PayloadEncoding

func init() {
	var res []PayloadEncoding
	if err := json.Unmarshal([]byte(`["PAYLOAD_ENCODING_HEXADECIMAL","PAYLOAD_ENCODING_TEXT_UTF8"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		PayloadEncodingEnum = append(PayloadEncodingEnum, v)
	}
}

func (m PayloadEncoding) validatePayloadEncodingEnum(path, location string, value PayloadEncoding) error {
	if err := validate.EnumCase(path, location, value, PayloadEncodingEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this payload encoding
func (m PayloadEncoding) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePayloadEncodingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this payload encoding based on context it is used
func (m PayloadEncoding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
