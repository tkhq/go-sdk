// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSmartContractInterfaceIntent create smart contract interface intent
//
// swagger:model CreateSmartContractInterfaceIntent
type CreateSmartContractInterfaceIntent struct {

	// Human-readable name for a Smart Contract Interface.
	// Required: true
	Label *string `json:"label"`

	// Notes for a Smart Contract Interface.
	Notes string `json:"notes,omitempty"`

	// Corresponding contract address or program ID
	// Required: true
	SmartContractAddress *string `json:"smartContractAddress"`

	// ABI/IDL as a JSON string
	// Required: true
	SmartContractInterface *string `json:"smartContractInterface"`

	// type
	// Required: true
	Type *SmartContractInterfaceType `json:"type"`
}

// Validate validates this create smart contract interface intent
func (m *CreateSmartContractInterfaceIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartContractAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartContractInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSmartContractInterfaceIntent) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *CreateSmartContractInterfaceIntent) validateSmartContractAddress(formats strfmt.Registry) error {

	if err := validate.Required("smartContractAddress", "body", m.SmartContractAddress); err != nil {
		return err
	}

	return nil
}

func (m *CreateSmartContractInterfaceIntent) validateSmartContractInterface(formats strfmt.Registry) error {

	if err := validate.Required("smartContractInterface", "body", m.SmartContractInterface); err != nil {
		return err
	}

	return nil
}

func (m *CreateSmartContractInterfaceIntent) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create smart contract interface intent based on the context it is used
func (m *CreateSmartContractInterfaceIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSmartContractInterfaceIntent) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSmartContractInterfaceIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSmartContractInterfaceIntent) UnmarshalBinary(b []byte) error {
	var res CreateSmartContractInterfaceIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
