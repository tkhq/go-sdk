// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InitOtpAuthIntent init otp auth intent
//
// swagger:model InitOtpAuthIntent
type InitOtpAuthIntent struct {

	// Email or phone number to send the OTP code to
	// Required: true
	Contact *string `json:"contact"`

	// Optional parameters for customizing emails. If not provided, the default email will be used.
	EmailCustomization *EmailCustomizationParams `json:"emailCustomization,omitempty"`

	// Enum to specifiy whether to send OTP via SMS or email
	// Required: true
	OtpType *string `json:"otpType"`
}

// Validate validates this init otp auth intent
func (m *InitOtpAuthIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailCustomization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitOtpAuthIntent) validateContact(formats strfmt.Registry) error {

	if err := validate.Required("contact", "body", m.Contact); err != nil {
		return err
	}

	return nil
}

func (m *InitOtpAuthIntent) validateEmailCustomization(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailCustomization) { // not required
		return nil
	}

	if m.EmailCustomization != nil {
		if err := m.EmailCustomization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailCustomization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailCustomization")
			}
			return err
		}
	}

	return nil
}

func (m *InitOtpAuthIntent) validateOtpType(formats strfmt.Registry) error {

	if err := validate.Required("otpType", "body", m.OtpType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this init otp auth intent based on the context it is used
func (m *InitOtpAuthIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmailCustomization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitOtpAuthIntent) contextValidateEmailCustomization(ctx context.Context, formats strfmt.Registry) error {

	if m.EmailCustomization != nil {

		if swag.IsZero(m.EmailCustomization) { // not required
			return nil
		}

		if err := m.EmailCustomization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailCustomization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailCustomization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InitOtpAuthIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitOtpAuthIntent) UnmarshalBinary(b []byte) error {
	var res InitOtpAuthIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
