// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetVerifiedSubOrgIdsRequest get verified sub org ids request
//
// swagger:model GetVerifiedSubOrgIdsRequest
type GetVerifiedSubOrgIdsRequest struct {

	// Specifies the type of filter to apply, i.e 'EMAIL', 'PHONE_NUMBER'
	FilterType string `json:"filterType,omitempty"`

	// The value of the filter to apply for the specified type. For example, a specific email or phone number string.
	FilterValue string `json:"filterValue,omitempty"`

	// Unique identifier for the parent Organization. This is used to find sub-organizations within it.
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Parameters used for cursor-based pagination.
	PaginationOptions *Pagination `json:"paginationOptions,omitempty"`
}

// Validate validates this get verified sub org ids request
func (m *GetVerifiedSubOrgIdsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaginationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetVerifiedSubOrgIdsRequest) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *GetVerifiedSubOrgIdsRequest) validatePaginationOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.PaginationOptions) { // not required
		return nil
	}

	if m.PaginationOptions != nil {
		if err := m.PaginationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginationOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get verified sub org ids request based on the context it is used
func (m *GetVerifiedSubOrgIdsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaginationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetVerifiedSubOrgIdsRequest) contextValidatePaginationOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.PaginationOptions != nil {

		if swag.IsZero(m.PaginationOptions) { // not required
			return nil
		}

		if err := m.PaginationOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetVerifiedSubOrgIdsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetVerifiedSubOrgIdsRequest) UnmarshalBinary(b []byte) error {
	var res GetVerifiedSubOrgIdsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
