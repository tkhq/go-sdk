// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActivityV1PolicyEvaluation activity v1 policy evaluation
//
// swagger:model activity.v1.PolicyEvaluation
type ActivityV1PolicyEvaluation struct {

	// Unique identifier for a given Activity.
	// Required: true
	ActivityID *string `json:"activityId"`

	// created at
	// Required: true
	CreatedAt *ExternalDataV1Timestamp `json:"createdAt"`

	// Unique identifier for a given policy evaluation.
	// Required: true
	ID *string `json:"id"`

	// Unique identifier for the Organization the Activity belongs to.
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Detailed evaluation result for each Policy that was run.
	// Required: true
	PolicyEvaluations []*UmpV1PolicyEvaluation `json:"policyEvaluations"`

	// Unique identifier for the Vote associated with this policy evaluation.
	// Required: true
	VoteID *string `json:"voteId"`
}

// Validate validates this activity v1 policy evaluation
func (m *ActivityV1PolicyEvaluation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyEvaluations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoteID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityV1PolicyEvaluation) validateActivityID(formats strfmt.Registry) error {

	if err := validate.Required("activityId", "body", m.ActivityID); err != nil {
		return err
	}

	return nil
}

func (m *ActivityV1PolicyEvaluation) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityV1PolicyEvaluation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ActivityV1PolicyEvaluation) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *ActivityV1PolicyEvaluation) validatePolicyEvaluations(formats strfmt.Registry) error {

	if err := validate.Required("policyEvaluations", "body", m.PolicyEvaluations); err != nil {
		return err
	}

	for i := 0; i < len(m.PolicyEvaluations); i++ {
		if swag.IsZero(m.PolicyEvaluations[i]) { // not required
			continue
		}

		if m.PolicyEvaluations[i] != nil {
			if err := m.PolicyEvaluations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyEvaluations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyEvaluations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivityV1PolicyEvaluation) validateVoteID(formats strfmt.Registry) error {

	if err := validate.Required("voteId", "body", m.VoteID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this activity v1 policy evaluation based on the context it is used
func (m *ActivityV1PolicyEvaluation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyEvaluations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityV1PolicyEvaluation) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {

		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityV1PolicyEvaluation) contextValidatePolicyEvaluations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyEvaluations); i++ {

		if m.PolicyEvaluations[i] != nil {

			if swag.IsZero(m.PolicyEvaluations[i]) { // not required
				return nil
			}

			if err := m.PolicyEvaluations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyEvaluations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyEvaluations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActivityV1PolicyEvaluation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActivityV1PolicyEvaluation) UnmarshalBinary(b []byte) error {
	var res ActivityV1PolicyEvaluation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
