// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SmartContractInterfaceType smart contract interface type
//
// swagger:model SmartContractInterfaceType
type SmartContractInterfaceType string

func NewSmartContractInterfaceType(value SmartContractInterfaceType) *SmartContractInterfaceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SmartContractInterfaceType.
func (m SmartContractInterfaceType) Pointer() *SmartContractInterfaceType {
	return &m
}

const (

	// SmartContractInterfaceTypeEthereum captures enum value "SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM"
	SmartContractInterfaceTypeEthereum SmartContractInterfaceType = "SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM"

	// SmartContractInterfaceTypeSolana captures enum value "SMART_CONTRACT_INTERFACE_TYPE_SOLANA"
	SmartContractInterfaceTypeSolana SmartContractInterfaceType = "SMART_CONTRACT_INTERFACE_TYPE_SOLANA"
)

// for schema
var SmartContractInterfaceTypeEnum []SmartContractInterfaceType

func init() {
	var res []SmartContractInterfaceType
	if err := json.Unmarshal([]byte(`["SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM","SMART_CONTRACT_INTERFACE_TYPE_SOLANA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		SmartContractInterfaceTypeEnum = append(SmartContractInterfaceTypeEnum, v)
	}
}

func (m SmartContractInterfaceType) validateSmartContractInterfaceTypeEnum(path, location string, value SmartContractInterfaceType) error {
	if err := validate.EnumCase(path, location, value, SmartContractInterfaceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this smart contract interface type
func (m SmartContractInterfaceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSmartContractInterfaceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this smart contract interface type based on context it is used
func (m SmartContractInterfaceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
