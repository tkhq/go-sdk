// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIKeyParams Api key params
//
// swagger:model ApiKeyParams
type APIKeyParams struct {

	// Human-readable name for an API Key.
	// Required: true
	APIKeyName *string `json:"apiKeyName"`

	// Optional window (in seconds) indicating how long the API Key should last.
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`

	// The public component of a cryptographic key pair used to sign messages and transactions.
	// Required: true
	PublicKey *string `json:"publicKey"`
}

// Validate validates this Api key params
func (m *APIKeyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIKeyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKeyParams) validateAPIKeyName(formats strfmt.Registry) error {

	if err := validate.Required("apiKeyName", "body", m.APIKeyName); err != nil {
		return err
	}

	return nil
}

func (m *APIKeyParams) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Api key params based on context it is used
func (m *APIKeyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIKeyParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIKeyParams) UnmarshalBinary(b []byte) error {
	var res APIKeyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
