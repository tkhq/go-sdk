// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HashFunction hash function
//
// swagger:model HashFunction
type HashFunction string

func NewHashFunction(value HashFunction) *HashFunction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HashFunction.
func (m HashFunction) Pointer() *HashFunction {
	return &m
}

const (

	// HashFunctionNoOp captures enum value "HASH_FUNCTION_NO_OP"
	HashFunctionNoOp HashFunction = "HASH_FUNCTION_NO_OP"

	// HashFunctionSha256 captures enum value "HASH_FUNCTION_SHA256"
	HashFunctionSha256 HashFunction = "HASH_FUNCTION_SHA256"

	// HashFunctionKeccak256 captures enum value "HASH_FUNCTION_KECCAK256"
	HashFunctionKeccak256 HashFunction = "HASH_FUNCTION_KECCAK256"

	// HashFunctionNotApplicable captures enum value "HASH_FUNCTION_NOT_APPLICABLE"
	HashFunctionNotApplicable HashFunction = "HASH_FUNCTION_NOT_APPLICABLE"
)

// for schema
var HashFunctionEnum []HashFunction

func init() {
	var res []HashFunction
	if err := json.Unmarshal([]byte(`["HASH_FUNCTION_NO_OP","HASH_FUNCTION_SHA256","HASH_FUNCTION_KECCAK256","HASH_FUNCTION_NOT_APPLICABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		HashFunctionEnum = append(HashFunctionEnum, v)
	}
}

func (m HashFunction) validateHashFunctionEnum(path, location string, value HashFunction) error {
	if err := validate.EnumCase(path, location, value, HashFunctionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hash function
func (m HashFunction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHashFunctionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hash function based on context it is used
func (m HashFunction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
