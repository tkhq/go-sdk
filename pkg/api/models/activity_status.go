// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ActivityStatus activity status
//
// swagger:model ActivityStatus
type ActivityStatus string

func NewActivityStatus(value ActivityStatus) *ActivityStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ActivityStatus.
func (m ActivityStatus) Pointer() *ActivityStatus {
	return &m
}

const (

	// ACTIVITYSTATUSCREATED captures enum value "ACTIVITY_STATUS_CREATED"
	ACTIVITYSTATUSCREATED ActivityStatus = "ACTIVITY_STATUS_CREATED"

	// ACTIVITYSTATUSPENDING captures enum value "ACTIVITY_STATUS_PENDING"
	ACTIVITYSTATUSPENDING ActivityStatus = "ACTIVITY_STATUS_PENDING"

	// ACTIVITYSTATUSCOMPLETED captures enum value "ACTIVITY_STATUS_COMPLETED"
	ACTIVITYSTATUSCOMPLETED ActivityStatus = "ACTIVITY_STATUS_COMPLETED"

	// ACTIVITYSTATUSFAILED captures enum value "ACTIVITY_STATUS_FAILED"
	ACTIVITYSTATUSFAILED ActivityStatus = "ACTIVITY_STATUS_FAILED"

	// ACTIVITYSTATUSCONSENSUSNEEDED captures enum value "ACTIVITY_STATUS_CONSENSUS_NEEDED"
	ACTIVITYSTATUSCONSENSUSNEEDED ActivityStatus = "ACTIVITY_STATUS_CONSENSUS_NEEDED"

	// ACTIVITYSTATUSREJECTED captures enum value "ACTIVITY_STATUS_REJECTED"
	ACTIVITYSTATUSREJECTED ActivityStatus = "ACTIVITY_STATUS_REJECTED"
)

// for schema
var ActivityStatusEnum []ActivityStatus

func init() {
	var res []ActivityStatus
	if err := json.Unmarshal([]byte(`["ACTIVITY_STATUS_CREATED","ACTIVITY_STATUS_PENDING","ACTIVITY_STATUS_COMPLETED","ACTIVITY_STATUS_FAILED","ACTIVITY_STATUS_CONSENSUS_NEEDED","ACTIVITY_STATUS_REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ActivityStatusEnum = append(ActivityStatusEnum, v)
	}
}

func (m ActivityStatus) validateActivityStatusEnum(path, location string, value ActivityStatus) error {
	if err := validate.EnumCase(path, location, value, ActivityStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this activity status
func (m ActivityStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateActivityStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this activity status based on context it is used
func (m ActivityStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
