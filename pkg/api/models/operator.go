// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Operator operator
//
// swagger:model Operator
type Operator string

func NewOperator(value Operator) *Operator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Operator.
func (m Operator) Pointer() *Operator {
	return &m
}

const (

	// OperatorEqual captures enum value "OPERATOR_EQUAL"
	OperatorEqual Operator = "OPERATOR_EQUAL"

	// OperatorMoreThan captures enum value "OPERATOR_MORE_THAN"
	OperatorMoreThan Operator = "OPERATOR_MORE_THAN"

	// OperatorMoreThanOrEqual captures enum value "OPERATOR_MORE_THAN_OR_EQUAL"
	OperatorMoreThanOrEqual Operator = "OPERATOR_MORE_THAN_OR_EQUAL"

	// OperatorLessThan captures enum value "OPERATOR_LESS_THAN"
	OperatorLessThan Operator = "OPERATOR_LESS_THAN"

	// OperatorLessThanOrEqual captures enum value "OPERATOR_LESS_THAN_OR_EQUAL"
	OperatorLessThanOrEqual Operator = "OPERATOR_LESS_THAN_OR_EQUAL"

	// OperatorContains captures enum value "OPERATOR_CONTAINS"
	OperatorContains Operator = "OPERATOR_CONTAINS"

	// OperatorNotEqual captures enum value "OPERATOR_NOT_EQUAL"
	OperatorNotEqual Operator = "OPERATOR_NOT_EQUAL"

	// OperatorIn captures enum value "OPERATOR_IN"
	OperatorIn Operator = "OPERATOR_IN"

	// OperatorNotIn captures enum value "OPERATOR_NOT_IN"
	OperatorNotIn Operator = "OPERATOR_NOT_IN"

	// OperatorContainsOne captures enum value "OPERATOR_CONTAINS_ONE"
	OperatorContainsOne Operator = "OPERATOR_CONTAINS_ONE"

	// OperatorContainsAll captures enum value "OPERATOR_CONTAINS_ALL"
	OperatorContainsAll Operator = "OPERATOR_CONTAINS_ALL"
)

// for schema
var OperatorEnum []Operator

func init() {
	var res []Operator
	if err := json.Unmarshal([]byte(`["OPERATOR_EQUAL","OPERATOR_MORE_THAN","OPERATOR_MORE_THAN_OR_EQUAL","OPERATOR_LESS_THAN","OPERATOR_LESS_THAN_OR_EQUAL","OPERATOR_CONTAINS","OPERATOR_NOT_EQUAL","OPERATOR_IN","OPERATOR_NOT_IN","OPERATOR_CONTAINS_ONE","OPERATOR_CONTAINS_ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		OperatorEnum = append(OperatorEnum, v)
	}
}

func (m Operator) validateOperatorEnum(path, location string, value Operator) error {
	if err := validate.EnumCase(path, location, value, OperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this operator
func (m Operator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this operator based on context it is used
func (m Operator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
