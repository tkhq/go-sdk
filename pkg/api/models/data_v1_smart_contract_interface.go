// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataV1SmartContractInterface data v1 smart contract interface
//
// swagger:model data.v1.SmartContractInterface
type DataV1SmartContractInterface struct {

	// created at
	// Required: true
	CreatedAt *ExternalDataV1Timestamp `json:"createdAt"`

	// The label corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
	// Required: true
	Label *string `json:"label"`

	// The notes corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
	// Required: true
	Notes *string `json:"notes"`

	// The Organization the Smart Contract Interface belongs to.
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// The address corresponding to the Smart Contract or Program.
	// Required: true
	SmartContractAddress *string `json:"smartContractAddress"`

	// The JSON corresponding to the Smart Contract Interface (ABI or IDL).
	// Required: true
	SmartContractInterface *string `json:"smartContractInterface"`

	// Unique identifier for a given Smart Contract Interface (ABI or IDL).
	// Required: true
	SmartContractInterfaceID *string `json:"smartContractInterfaceId"`

	// The type corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
	// Required: true
	Type *string `json:"type"`

	// updated at
	// Required: true
	UpdatedAt *ExternalDataV1Timestamp `json:"updatedAt"`
}

// Validate validates this data v1 smart contract interface
func (m *DataV1SmartContractInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartContractAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartContractInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartContractInterfaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataV1SmartContractInterface) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *DataV1SmartContractInterface) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *DataV1SmartContractInterface) validateNotes(formats strfmt.Registry) error {

	if err := validate.Required("notes", "body", m.Notes); err != nil {
		return err
	}

	return nil
}

func (m *DataV1SmartContractInterface) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *DataV1SmartContractInterface) validateSmartContractAddress(formats strfmt.Registry) error {

	if err := validate.Required("smartContractAddress", "body", m.SmartContractAddress); err != nil {
		return err
	}

	return nil
}

func (m *DataV1SmartContractInterface) validateSmartContractInterface(formats strfmt.Registry) error {

	if err := validate.Required("smartContractInterface", "body", m.SmartContractInterface); err != nil {
		return err
	}

	return nil
}

func (m *DataV1SmartContractInterface) validateSmartContractInterfaceID(formats strfmt.Registry) error {

	if err := validate.Required("smartContractInterfaceId", "body", m.SmartContractInterfaceID); err != nil {
		return err
	}

	return nil
}

func (m *DataV1SmartContractInterface) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DataV1SmartContractInterface) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedAt")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data v1 smart contract interface based on the context it is used
func (m *DataV1SmartContractInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataV1SmartContractInterface) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {

		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *DataV1SmartContractInterface) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedAt != nil {

		if err := m.UpdatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedAt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataV1SmartContractInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataV1SmartContractInterface) UnmarshalBinary(b []byte) error {
	var res DataV1SmartContractInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
