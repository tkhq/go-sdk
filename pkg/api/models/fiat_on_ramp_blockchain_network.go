// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FiatOnRampBlockchainNetwork fiat on ramp blockchain network
//
// swagger:model FiatOnRampBlockchainNetwork
type FiatOnRampBlockchainNetwork string

func NewFiatOnRampBlockchainNetwork(value FiatOnRampBlockchainNetwork) *FiatOnRampBlockchainNetwork {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FiatOnRampBlockchainNetwork.
func (m FiatOnRampBlockchainNetwork) Pointer() *FiatOnRampBlockchainNetwork {
	return &m
}

const (

	// FiatOnRampBlockchainNetworkBitcoin captures enum value "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN"
	FiatOnRampBlockchainNetworkBitcoin FiatOnRampBlockchainNetwork = "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN"

	// FiatOnRampBlockchainNetworkEthereum captures enum value "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_ETHEREUM"
	FiatOnRampBlockchainNetworkEthereum FiatOnRampBlockchainNetwork = "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_ETHEREUM"

	// FiatOnRampBlockchainNetworkSolana captures enum value "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_SOLANA"
	FiatOnRampBlockchainNetworkSolana FiatOnRampBlockchainNetwork = "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_SOLANA"

	// FiatOnRampBlockchainNetworkBase captures enum value "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BASE"
	FiatOnRampBlockchainNetworkBase FiatOnRampBlockchainNetwork = "FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BASE"
)

// for schema
var FiatOnRampBlockchainNetworkEnum []FiatOnRampBlockchainNetwork

func init() {
	var res []FiatOnRampBlockchainNetwork
	if err := json.Unmarshal([]byte(`["FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN","FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_ETHEREUM","FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_SOLANA","FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BASE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		FiatOnRampBlockchainNetworkEnum = append(FiatOnRampBlockchainNetworkEnum, v)
	}
}

func (m FiatOnRampBlockchainNetwork) validateFiatOnRampBlockchainNetworkEnum(path, location string, value FiatOnRampBlockchainNetwork) error {
	if err := validate.EnumCase(path, location, value, FiatOnRampBlockchainNetworkEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fiat on ramp blockchain network
func (m FiatOnRampBlockchainNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFiatOnRampBlockchainNetworkEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fiat on ramp blockchain network based on context it is used
func (m FiatOnRampBlockchainNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
