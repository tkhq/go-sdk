// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FiatOnRampPaymentMethod fiat on ramp payment method
//
// swagger:model FiatOnRampPaymentMethod
type FiatOnRampPaymentMethod string

func NewFiatOnRampPaymentMethod(value FiatOnRampPaymentMethod) *FiatOnRampPaymentMethod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FiatOnRampPaymentMethod.
func (m FiatOnRampPaymentMethod) Pointer() *FiatOnRampPaymentMethod {
	return &m
}

const (

	// FiatOnRampPaymentMethodCreditDebitCard captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD"
	FiatOnRampPaymentMethodCreditDebitCard FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD"

	// FiatOnRampPaymentMethodApplePay captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_APPLE_PAY"
	FiatOnRampPaymentMethodApplePay FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_APPLE_PAY"

	// FiatOnRampPaymentMethodGbpBankTransfer captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_GBP_BANK_TRANSFER"
	FiatOnRampPaymentMethodGbpBankTransfer FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_GBP_BANK_TRANSFER"

	// FiatOnRampPaymentMethodGbpOpenBankingPayment captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_GBP_OPEN_BANKING_PAYMENT"
	FiatOnRampPaymentMethodGbpOpenBankingPayment FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_GBP_OPEN_BANKING_PAYMENT"

	// FiatOnRampPaymentMethodGooglePay captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_GOOGLE_PAY"
	FiatOnRampPaymentMethodGooglePay FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_GOOGLE_PAY"

	// FiatOnRampPaymentMethodSepaBankTransfer captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_SEPA_BANK_TRANSFER"
	FiatOnRampPaymentMethodSepaBankTransfer FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_SEPA_BANK_TRANSFER"

	// FiatOnRampPaymentMethodPixInstantPayment captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_PIX_INSTANT_PAYMENT"
	FiatOnRampPaymentMethodPixInstantPayment FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_PIX_INSTANT_PAYMENT"

	// FiatOnRampPaymentMethodPaypal captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_PAYPAL"
	FiatOnRampPaymentMethodPaypal FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_PAYPAL"

	// FiatOnRampPaymentMethodVenmo captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_VENMO"
	FiatOnRampPaymentMethodVenmo FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_VENMO"

	// FiatOnRampPaymentMethodMoonpayBalance captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_MOONPAY_BALANCE"
	FiatOnRampPaymentMethodMoonpayBalance FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_MOONPAY_BALANCE"

	// FiatOnRampPaymentMethodCryptoAccount captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_CRYPTO_ACCOUNT"
	FiatOnRampPaymentMethodCryptoAccount FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_CRYPTO_ACCOUNT"

	// FiatOnRampPaymentMethodFiatWallet captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_FIAT_WALLET"
	FiatOnRampPaymentMethodFiatWallet FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_FIAT_WALLET"

	// FiatOnRampPaymentMethodAchBankAccount captures enum value "FIAT_ON_RAMP_PAYMENT_METHOD_ACH_BANK_ACCOUNT"
	FiatOnRampPaymentMethodAchBankAccount FiatOnRampPaymentMethod = "FIAT_ON_RAMP_PAYMENT_METHOD_ACH_BANK_ACCOUNT"
)

// for schema
var FiatOnRampPaymentMethodEnum []FiatOnRampPaymentMethod

func init() {
	var res []FiatOnRampPaymentMethod
	if err := json.Unmarshal([]byte(`["FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD","FIAT_ON_RAMP_PAYMENT_METHOD_APPLE_PAY","FIAT_ON_RAMP_PAYMENT_METHOD_GBP_BANK_TRANSFER","FIAT_ON_RAMP_PAYMENT_METHOD_GBP_OPEN_BANKING_PAYMENT","FIAT_ON_RAMP_PAYMENT_METHOD_GOOGLE_PAY","FIAT_ON_RAMP_PAYMENT_METHOD_SEPA_BANK_TRANSFER","FIAT_ON_RAMP_PAYMENT_METHOD_PIX_INSTANT_PAYMENT","FIAT_ON_RAMP_PAYMENT_METHOD_PAYPAL","FIAT_ON_RAMP_PAYMENT_METHOD_VENMO","FIAT_ON_RAMP_PAYMENT_METHOD_MOONPAY_BALANCE","FIAT_ON_RAMP_PAYMENT_METHOD_CRYPTO_ACCOUNT","FIAT_ON_RAMP_PAYMENT_METHOD_FIAT_WALLET","FIAT_ON_RAMP_PAYMENT_METHOD_ACH_BANK_ACCOUNT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		FiatOnRampPaymentMethodEnum = append(FiatOnRampPaymentMethodEnum, v)
	}
}

func (m FiatOnRampPaymentMethod) validateFiatOnRampPaymentMethodEnum(path, location string, value FiatOnRampPaymentMethod) error {
	if err := validate.EnumCase(path, location, value, FiatOnRampPaymentMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fiat on ramp payment method
func (m FiatOnRampPaymentMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFiatOnRampPaymentMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fiat on ramp payment method based on context it is used
func (m FiatOnRampPaymentMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
