// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InitUserEmailRecoveryIntent init user email recovery intent
//
// swagger:model InitUserEmailRecoveryIntent
type InitUserEmailRecoveryIntent struct {

	// Email of the user starting recovery
	// Required: true
	Email *string `json:"email"`

	// Optional parameters for customizing emails. If not provided, the default email will be used.
	EmailCustomization *EmailCustomizationParams `json:"emailCustomization,omitempty"`

	// Expiration window (in seconds) indicating how long the recovery credential is valid for. If not provided, a default of 15 minutes will be used.
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`

	// Client-side public key generated by the user, to which the recovery bundle will be encrypted.
	// Required: true
	TargetPublicKey *string `json:"targetPublicKey"`
}

// Validate validates this init user email recovery intent
func (m *InitUserEmailRecoveryIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailCustomization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitUserEmailRecoveryIntent) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *InitUserEmailRecoveryIntent) validateEmailCustomization(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailCustomization) { // not required
		return nil
	}

	if m.EmailCustomization != nil {
		if err := m.EmailCustomization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailCustomization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailCustomization")
			}
			return err
		}
	}

	return nil
}

func (m *InitUserEmailRecoveryIntent) validateTargetPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("targetPublicKey", "body", m.TargetPublicKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this init user email recovery intent based on the context it is used
func (m *InitUserEmailRecoveryIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmailCustomization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitUserEmailRecoveryIntent) contextValidateEmailCustomization(ctx context.Context, formats strfmt.Registry) error {

	if m.EmailCustomization != nil {

		if swag.IsZero(m.EmailCustomization) { // not required
			return nil
		}

		if err := m.EmailCustomization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailCustomization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailCustomization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InitUserEmailRecoveryIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitUserEmailRecoveryIntent) UnmarshalBinary(b []byte) error {
	var res InitUserEmailRecoveryIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
