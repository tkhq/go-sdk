// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccessType access type
//
// swagger:model AccessType
type AccessType string

func NewAccessType(value AccessType) *AccessType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AccessType.
func (m AccessType) Pointer() *AccessType {
	return &m
}

const (

	// AccessTypeWeb captures enum value "ACCESS_TYPE_WEB"
	AccessTypeWeb AccessType = "ACCESS_TYPE_WEB"

	// AccessTypeAPI captures enum value "ACCESS_TYPE_API"
	AccessTypeAPI AccessType = "ACCESS_TYPE_API"

	// AccessTypeAll captures enum value "ACCESS_TYPE_ALL"
	AccessTypeAll AccessType = "ACCESS_TYPE_ALL"
)

// for schema
var AccessTypeEnum []AccessType

func init() {
	var res []AccessType
	if err := json.Unmarshal([]byte(`["ACCESS_TYPE_WEB","ACCESS_TYPE_API","ACCESS_TYPE_ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		AccessTypeEnum = append(AccessTypeEnum, v)
	}
}

func (m AccessType) validateAccessTypeEnum(path, location string, value AccessType) error {
	if err := validate.EnumCase(path, location, value, AccessTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this access type
func (m AccessType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccessTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this access type based on context it is used
func (m AccessType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
