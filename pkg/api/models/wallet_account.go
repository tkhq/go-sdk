// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WalletAccount wallet account
//
// swagger:model WalletAccount
type WalletAccount struct {

	// Address generated using the Wallet seed and Account parameters.
	// Required: true
	Address *string `json:"address"`

	// Address format used to generate the Account.
	// Required: true
	AddressFormat *AddressFormat `json:"addressFormat"`

	// created at
	// Required: true
	CreatedAt *ExternalDataV1Timestamp `json:"createdAt"`

	// Cryptographic curve used to generate the Account.
	// Required: true
	Curve *Curve `json:"curve"`

	// The Organization the Account belongs to.
	// Required: true
	OrganizationID *string `json:"organizationId"`

	// Path used to generate the Account.
	// Required: true
	Path *string `json:"path"`

	// Path format used to generate the Account.
	// Required: true
	PathFormat *PathFormat `json:"pathFormat"`

	// The public component of this wallet account's underlying cryptographic key pair.
	PublicKey *string `json:"publicKey,omitempty"`

	// updated at
	// Required: true
	UpdatedAt *ExternalDataV1Timestamp `json:"updatedAt"`

	// Unique identifier for a given Wallet Account.
	// Required: true
	WalletAccountID *string `json:"walletAccountId"`

	// The Wallet the Account was derived from.
	// Required: true
	WalletID *string `json:"walletId"`
}

// Validate validates this wallet account
func (m *WalletAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWalletAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWalletID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WalletAccount) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *WalletAccount) validateAddressFormat(formats strfmt.Registry) error {

	if err := validate.Required("addressFormat", "body", m.AddressFormat); err != nil {
		return err
	}

	if err := validate.Required("addressFormat", "body", m.AddressFormat); err != nil {
		return err
	}

	if m.AddressFormat != nil {
		if err := m.AddressFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressFormat")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) validateCurve(formats strfmt.Registry) error {

	if err := validate.Required("curve", "body", m.Curve); err != nil {
		return err
	}

	if err := validate.Required("curve", "body", m.Curve); err != nil {
		return err
	}

	if m.Curve != nil {
		if err := m.Curve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curve")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

func (m *WalletAccount) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *WalletAccount) validatePathFormat(formats strfmt.Registry) error {

	if err := validate.Required("pathFormat", "body", m.PathFormat); err != nil {
		return err
	}

	if err := validate.Required("pathFormat", "body", m.PathFormat); err != nil {
		return err
	}

	if m.PathFormat != nil {
		if err := m.PathFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pathFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pathFormat")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedAt")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) validateWalletAccountID(formats strfmt.Registry) error {

	if err := validate.Required("walletAccountId", "body", m.WalletAccountID); err != nil {
		return err
	}

	return nil
}

func (m *WalletAccount) validateWalletID(formats strfmt.Registry) error {

	if err := validate.Required("walletId", "body", m.WalletID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this wallet account based on the context it is used
func (m *WalletAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePathFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WalletAccount) contextValidateAddressFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.AddressFormat != nil {

		if err := m.AddressFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("addressFormat")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {

		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) contextValidateCurve(ctx context.Context, formats strfmt.Registry) error {

	if m.Curve != nil {

		if err := m.Curve.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curve")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) contextValidatePathFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.PathFormat != nil {

		if err := m.PathFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pathFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pathFormat")
			}
			return err
		}
	}

	return nil
}

func (m *WalletAccount) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedAt != nil {

		if err := m.UpdatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedAt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WalletAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WalletAccount) UnmarshalBinary(b []byte) error {
	var res WalletAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
