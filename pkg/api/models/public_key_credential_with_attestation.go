// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicKeyCredentialWithAttestation public key credential with attestation
//
// swagger:model PublicKeyCredentialWithAttestation
type PublicKeyCredentialWithAttestation struct {

	// authenticator attachment
	// Enum: ["cross-platform","platform"]
	AuthenticatorAttachment *string `json:"authenticatorAttachment,omitempty"`

	// client extension results
	// Required: true
	ClientExtensionResults *SimpleClientExtensionResults `json:"clientExtensionResults"`

	// id
	// Required: true
	ID *string `json:"id"`

	// raw Id
	// Required: true
	RawID *string `json:"rawId"`

	// response
	// Required: true
	Response *AuthenticatorAttestationResponse `json:"response"`

	// type
	// Required: true
	// Enum: ["public-key"]
	Type *string `json:"type"`
}

// Validate validates this public key credential with attestation
func (m *PublicKeyCredentialWithAttestation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticatorAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientExtensionResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var publicKeyCredentialWithAttestationTypeAuthenticatorAttachmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cross-platform","platform"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicKeyCredentialWithAttestationTypeAuthenticatorAttachmentPropEnum = append(publicKeyCredentialWithAttestationTypeAuthenticatorAttachmentPropEnum, v)
	}
}

const (

	// PublicKeyCredentialWithAttestationAuthenticatorAttachmentCrossDashPlatform captures enum value "cross-platform"
	PublicKeyCredentialWithAttestationAuthenticatorAttachmentCrossDashPlatform string = "cross-platform"

	// PublicKeyCredentialWithAttestationAuthenticatorAttachmentPlatform captures enum value "platform"
	PublicKeyCredentialWithAttestationAuthenticatorAttachmentPlatform string = "platform"
)

// prop value enum
func (m *PublicKeyCredentialWithAttestation) validateAuthenticatorAttachmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicKeyCredentialWithAttestationTypeAuthenticatorAttachmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicKeyCredentialWithAttestation) validateAuthenticatorAttachment(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticatorAttachment) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticatorAttachmentEnum("authenticatorAttachment", "body", *m.AuthenticatorAttachment); err != nil {
		return err
	}

	return nil
}

func (m *PublicKeyCredentialWithAttestation) validateClientExtensionResults(formats strfmt.Registry) error {

	if err := validate.Required("clientExtensionResults", "body", m.ClientExtensionResults); err != nil {
		return err
	}

	if m.ClientExtensionResults != nil {
		if err := m.ClientExtensionResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensionResults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientExtensionResults")
			}
			return err
		}
	}

	return nil
}

func (m *PublicKeyCredentialWithAttestation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PublicKeyCredentialWithAttestation) validateRawID(formats strfmt.Registry) error {

	if err := validate.Required("rawId", "body", m.RawID); err != nil {
		return err
	}

	return nil
}

func (m *PublicKeyCredentialWithAttestation) validateResponse(formats strfmt.Registry) error {

	if err := validate.Required("response", "body", m.Response); err != nil {
		return err
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

var publicKeyCredentialWithAttestationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public-key"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicKeyCredentialWithAttestationTypeTypePropEnum = append(publicKeyCredentialWithAttestationTypeTypePropEnum, v)
	}
}

const (

	// PublicKeyCredentialWithAttestationTypePublicDashKey captures enum value "public-key"
	PublicKeyCredentialWithAttestationTypePublicDashKey string = "public-key"
)

// prop value enum
func (m *PublicKeyCredentialWithAttestation) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicKeyCredentialWithAttestationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicKeyCredentialWithAttestation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this public key credential with attestation based on the context it is used
func (m *PublicKeyCredentialWithAttestation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientExtensionResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicKeyCredentialWithAttestation) contextValidateClientExtensionResults(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientExtensionResults != nil {

		if err := m.ClientExtensionResults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientExtensionResults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientExtensionResults")
			}
			return err
		}
	}

	return nil
}

func (m *PublicKeyCredentialWithAttestation) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.Response != nil {

		if err := m.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicKeyCredentialWithAttestation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicKeyCredentialWithAttestation) UnmarshalBinary(b []byte) error {
	var res PublicKeyCredentialWithAttestation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
