// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OauthIntent oauth intent
//
// swagger:model OauthIntent
type OauthIntent struct {

	// Optional human-readable name for an API Key. If none provided, default to Oauth - <Timestamp>
	APIKeyName string `json:"apiKeyName,omitempty"`

	// Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
	ExpirationSeconds string `json:"expirationSeconds,omitempty"`

	// Invalidate all other previously generated Oauth API keys
	InvalidateExisting *bool `json:"invalidateExisting,omitempty"`

	// Base64 encoded OIDC token
	// Required: true
	OidcToken *string `json:"oidcToken"`

	// Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.
	// Required: true
	TargetPublicKey *string `json:"targetPublicKey"`
}

// Validate validates this oauth intent
func (m *OauthIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOidcToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OauthIntent) validateOidcToken(formats strfmt.Registry) error {

	if err := validate.Required("oidcToken", "body", m.OidcToken); err != nil {
		return err
	}

	return nil
}

func (m *OauthIntent) validateTargetPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("targetPublicKey", "body", m.TargetPublicKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oauth intent based on context it is used
func (m *OauthIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OauthIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OauthIntent) UnmarshalBinary(b []byte) error {
	var res OauthIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
