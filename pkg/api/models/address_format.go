// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AddressFormat address format
//
// swagger:model AddressFormat
type AddressFormat string

func NewAddressFormat(value AddressFormat) *AddressFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AddressFormat.
func (m AddressFormat) Pointer() *AddressFormat {
	return &m
}

const (

	// ADDRESSFORMATUNCOMPRESSED captures enum value "ADDRESS_FORMAT_UNCOMPRESSED"
	ADDRESSFORMATUNCOMPRESSED AddressFormat = "ADDRESS_FORMAT_UNCOMPRESSED"

	// ADDRESSFORMATCOMPRESSED captures enum value "ADDRESS_FORMAT_COMPRESSED"
	ADDRESSFORMATCOMPRESSED AddressFormat = "ADDRESS_FORMAT_COMPRESSED"

	// ADDRESSFORMATETHEREUM captures enum value "ADDRESS_FORMAT_ETHEREUM"
	ADDRESSFORMATETHEREUM AddressFormat = "ADDRESS_FORMAT_ETHEREUM"

	// ADDRESSFORMATSOLANA captures enum value "ADDRESS_FORMAT_SOLANA"
	ADDRESSFORMATSOLANA AddressFormat = "ADDRESS_FORMAT_SOLANA"

	// ADDRESSFORMATCOSMOS captures enum value "ADDRESS_FORMAT_COSMOS"
	ADDRESSFORMATCOSMOS AddressFormat = "ADDRESS_FORMAT_COSMOS"

	// ADDRESSFORMATTRON captures enum value "ADDRESS_FORMAT_TRON"
	ADDRESSFORMATTRON AddressFormat = "ADDRESS_FORMAT_TRON"

	// ADDRESSFORMATSUI captures enum value "ADDRESS_FORMAT_SUI"
	ADDRESSFORMATSUI AddressFormat = "ADDRESS_FORMAT_SUI"

	// ADDRESSFORMATAPTOS captures enum value "ADDRESS_FORMAT_APTOS"
	ADDRESSFORMATAPTOS AddressFormat = "ADDRESS_FORMAT_APTOS"

	// ADDRESSFORMATBITCOINMAINNETP2PKH captures enum value "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH"
	ADDRESSFORMATBITCOINMAINNETP2PKH AddressFormat = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH"

	// ADDRESSFORMATBITCOINMAINNETP2SH captures enum value "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH"
	ADDRESSFORMATBITCOINMAINNETP2SH AddressFormat = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH"

	// ADDRESSFORMATBITCOINMAINNETP2WPKH captures enum value "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH"
	ADDRESSFORMATBITCOINMAINNETP2WPKH AddressFormat = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH"

	// ADDRESSFORMATBITCOINMAINNETP2WSH captures enum value "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH"
	ADDRESSFORMATBITCOINMAINNETP2WSH AddressFormat = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH"

	// ADDRESSFORMATBITCOINMAINNETP2TR captures enum value "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR"
	ADDRESSFORMATBITCOINMAINNETP2TR AddressFormat = "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR"

	// ADDRESSFORMATBITCOINTESTNETP2PKH captures enum value "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH"
	ADDRESSFORMATBITCOINTESTNETP2PKH AddressFormat = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH"

	// ADDRESSFORMATBITCOINTESTNETP2SH captures enum value "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH"
	ADDRESSFORMATBITCOINTESTNETP2SH AddressFormat = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH"

	// ADDRESSFORMATBITCOINTESTNETP2WPKH captures enum value "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH"
	ADDRESSFORMATBITCOINTESTNETP2WPKH AddressFormat = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH"

	// ADDRESSFORMATBITCOINTESTNETP2WSH captures enum value "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH"
	ADDRESSFORMATBITCOINTESTNETP2WSH AddressFormat = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH"

	// ADDRESSFORMATBITCOINTESTNETP2TR captures enum value "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR"
	ADDRESSFORMATBITCOINTESTNETP2TR AddressFormat = "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR"

	// ADDRESSFORMATBITCOINSIGNETP2PKH captures enum value "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH"
	ADDRESSFORMATBITCOINSIGNETP2PKH AddressFormat = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH"

	// ADDRESSFORMATBITCOINSIGNETP2SH captures enum value "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH"
	ADDRESSFORMATBITCOINSIGNETP2SH AddressFormat = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH"

	// ADDRESSFORMATBITCOINSIGNETP2WPKH captures enum value "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH"
	ADDRESSFORMATBITCOINSIGNETP2WPKH AddressFormat = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH"

	// ADDRESSFORMATBITCOINSIGNETP2WSH captures enum value "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH"
	ADDRESSFORMATBITCOINSIGNETP2WSH AddressFormat = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH"

	// ADDRESSFORMATBITCOINSIGNETP2TR captures enum value "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR"
	ADDRESSFORMATBITCOINSIGNETP2TR AddressFormat = "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR"

	// ADDRESSFORMATBITCOINREGTESTP2PKH captures enum value "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH"
	ADDRESSFORMATBITCOINREGTESTP2PKH AddressFormat = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH"

	// ADDRESSFORMATBITCOINREGTESTP2SH captures enum value "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH"
	ADDRESSFORMATBITCOINREGTESTP2SH AddressFormat = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH"

	// ADDRESSFORMATBITCOINREGTESTP2WPKH captures enum value "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH"
	ADDRESSFORMATBITCOINREGTESTP2WPKH AddressFormat = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH"

	// ADDRESSFORMATBITCOINREGTESTP2WSH captures enum value "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH"
	ADDRESSFORMATBITCOINREGTESTP2WSH AddressFormat = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH"

	// ADDRESSFORMATBITCOINREGTESTP2TR captures enum value "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR"
	ADDRESSFORMATBITCOINREGTESTP2TR AddressFormat = "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR"
)

// for schema
var AddressFormatEnum []AddressFormat

func init() {
	var res []AddressFormat
	if err := json.Unmarshal([]byte(`["ADDRESS_FORMAT_UNCOMPRESSED","ADDRESS_FORMAT_COMPRESSED","ADDRESS_FORMAT_ETHEREUM","ADDRESS_FORMAT_SOLANA","ADDRESS_FORMAT_COSMOS","ADDRESS_FORMAT_TRON","ADDRESS_FORMAT_SUI","ADDRESS_FORMAT_APTOS","ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH","ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH","ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH","ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH","ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR","ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH","ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH","ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH","ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH","ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR","ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH","ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH","ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH","ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH","ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR","ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH","ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH","ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH","ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH","ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		AddressFormatEnum = append(AddressFormatEnum, v)
	}
}

func (m AddressFormat) validateAddressFormatEnum(path, location string, value AddressFormat) error {
	if err := validate.EnumCase(path, location, value, AddressFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this address format
func (m AddressFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAddressFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this address format based on context it is used
func (m AddressFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
