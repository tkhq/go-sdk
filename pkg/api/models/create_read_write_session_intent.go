// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateReadWriteSessionIntent create read write session intent
//
// swagger:model CreateReadWriteSessionIntent
type CreateReadWriteSessionIntent struct {

	// Optional human-readable name for an API Key. If none provided, default to Read Write Session - <Timestamp>
	APIKeyName *string `json:"apiKeyName,omitempty"`

	// Email of the user to create a read write session for
	// Required: true
	Email *string `json:"email"`

	// Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
	ExpirationSeconds *string `json:"expirationSeconds,omitempty"`

	// Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
	// Required: true
	TargetPublicKey *string `json:"targetPublicKey"`
}

// Validate validates this create read write session intent
func (m *CreateReadWriteSessionIntent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateReadWriteSessionIntent) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *CreateReadWriteSessionIntent) validateTargetPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("targetPublicKey", "body", m.TargetPublicKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create read write session intent based on context it is used
func (m *CreateReadWriteSessionIntent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateReadWriteSessionIntent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateReadWriteSessionIntent) UnmarshalBinary(b []byte) error {
	var res CreateReadWriteSessionIntent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
