// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPolicyEvaluationsResponse get policy evaluations response
//
// swagger:model GetPolicyEvaluationsResponse
type GetPolicyEvaluationsResponse struct {

	// policy evaluations
	// Required: true
	PolicyEvaluations []*ActivityV1PolicyEvaluation `json:"policyEvaluations"`
}

// Validate validates this get policy evaluations response
func (m *GetPolicyEvaluationsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicyEvaluations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPolicyEvaluationsResponse) validatePolicyEvaluations(formats strfmt.Registry) error {

	if err := validate.Required("policyEvaluations", "body", m.PolicyEvaluations); err != nil {
		return err
	}

	for i := 0; i < len(m.PolicyEvaluations); i++ {
		if swag.IsZero(m.PolicyEvaluations[i]) { // not required
			continue
		}

		if m.PolicyEvaluations[i] != nil {
			if err := m.PolicyEvaluations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyEvaluations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyEvaluations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get policy evaluations response based on the context it is used
func (m *GetPolicyEvaluationsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyEvaluations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPolicyEvaluationsResponse) contextValidatePolicyEvaluations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyEvaluations); i++ {

		if m.PolicyEvaluations[i] != nil {

			if swag.IsZero(m.PolicyEvaluations[i]) { // not required
				return nil
			}

			if err := m.PolicyEvaluations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyEvaluations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyEvaluations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetPolicyEvaluationsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPolicyEvaluationsResponse) UnmarshalBinary(b []byte) error {
	var res GetPolicyEvaluationsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
