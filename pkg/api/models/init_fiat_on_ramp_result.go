// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InitFiatOnRampResult init fiat on ramp result
//
// swagger:model InitFiatOnRampResult
type InitFiatOnRampResult struct {

	// Unique identifier used to retrieve transaction statuses for a given fiat on-ramp flow.
	// Required: true
	OnRampTransactionID *string `json:"onRampTransactionId"`

	// Unique URL for a given fiat on-ramp flow.
	// Required: true
	OnRampURL *string `json:"onRampUrl"`
}

// Validate validates this init fiat on ramp result
func (m *InitFiatOnRampResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOnRampTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnRampURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitFiatOnRampResult) validateOnRampTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("onRampTransactionId", "body", m.OnRampTransactionID); err != nil {
		return err
	}

	return nil
}

func (m *InitFiatOnRampResult) validateOnRampURL(formats strfmt.Registry) error {

	if err := validate.Required("onRampUrl", "body", m.OnRampURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this init fiat on ramp result based on context it is used
func (m *InitFiatOnRampResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InitFiatOnRampResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitFiatOnRampResult) UnmarshalBinary(b []byte) error {
	var res InitFiatOnRampResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
